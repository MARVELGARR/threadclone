// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  access_token   String?
  token_type     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account        Account[]
  profile Profile?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String?
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  bio           String   
  links           String
  follower Followers[] @relation("followerRelation")
  following Followers[] @relation("followingRelation")
  userId String @db.ObjectId @unique
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Followers{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  followerId    String   @db.ObjectId
  followingId   String   @db.ObjectId
  follower      Profile  @relation("followerRelation",fields: [followerId], references: [id], onDelete: Cascade)
  following     Profile  @relation("followingRelation",fields: [followingId], references: [id], onDelete: Cascade)

  status String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@unique([followerId, followingId])
}

